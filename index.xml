<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>(≧▽≦)</title>
    <link>https://liyiheng.github.io/blog/</link>
    <description>Recent content on (≧▽≦)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 04 Nov 2020 19:24:44 +0800</lastBuildDate><atom:link href="https://liyiheng.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RAII: Rust 模拟 golang 中的 defer</title>
      <link>https://liyiheng.github.io/blog/2020/11/raii-rust-%E6%A8%A1%E6%8B%9F-golang-%E4%B8%AD%E7%9A%84-defer/</link>
      <pubDate>Wed, 04 Nov 2020 19:24:44 +0800</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2020/11/raii-rust-%E6%A8%A1%E6%8B%9F-golang-%E4%B8%AD%E7%9A%84-defer/</guid>
      <description>&lt;p&gt;Go 中的 &lt;code&gt;defer&lt;/code&gt; 非常实用。今天尝试在 Rust 中模拟 &lt;code&gt;defer&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>io_uring 初探</title>
      <link>https://liyiheng.github.io/blog/2020/04/io_uring-%E5%88%9D%E6%8E%A2/</link>
      <pubDate>Wed, 22 Apr 2020 22:44:44 +0800</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2020/04/io_uring-%E5%88%9D%E6%8E%A2/</guid>
      <description>&lt;p&gt;Linux 在 5.1 引入了 &lt;code&gt;io_uring&lt;/code&gt;，据说性能接近 SPKD。
目前 Linux 已更新到 5.6.6 ，不妨尝试一下 &lt;code&gt;io_uring&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>6.824 Lab2 总结</title>
      <link>https://liyiheng.github.io/blog/2020/03/6.824-lab2-%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 07 Mar 2020 11:44:44 +0800</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2020/03/6.824-lab2-%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;6.824 课程的 Lab2 是实现 Raft，分为 2A、2B、2C 三部分。
2A 实现 leader 选举与心跳；2B 实现日志复制；2C 实现持久化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Actix-web 中间件、handler 间传递数据</title>
      <link>https://liyiheng.github.io/blog/2019/04/actix-web-%E4%B8%AD%E9%97%B4%E4%BB%B6handler-%E9%97%B4%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2019/04/actix-web-%E4%B8%AD%E9%97%B4%E4%BB%B6handler-%E9%97%B4%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE/</guid>
      <description>&lt;p&gt;背景：中间件 A 产生的数据，需在后续的其他中间件、Handler 中用到。&lt;!-- raw HTML omitted --&gt;
例如：Handler 中使用 &lt;code&gt;Auth&lt;/code&gt; 中间件从 token 中解出的 &lt;code&gt;user_id&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>从“unsafe”看数据结构对齐</title>
      <link>https://liyiheng.github.io/blog/2019/02/%E4%BB%8Eunsafe%E7%9C%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%B9%E9%BD%90/</link>
      <pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2019/02/%E4%BB%8Eunsafe%E7%9C%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AF%B9%E9%BD%90/</guid>
      <description>&lt;p&gt;数据结构对齐是什么？维基百科对其有如下定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;数据结构对齐是代码编译后在内存的布局与使用方式。包括三方面内容：数据对齐、数据结构填充（padding）与包入（packing）。&lt;!-- raw HTML omitted --&gt;
内存地址a被称为n字节对齐，当a是n的倍数（n应是2的幂）。&lt;!-- raw HTML omitted --&gt;
一次内存访问被称为对齐的，当被访问的数据长度为n 字节且该数据地址为n字节对齐。如果内存未对齐，称作misaligned。显然，字节访问总是对齐的。&lt;!-- raw HTML omitted --&gt;
内存指针是对齐的，如果它所指的数据是对齐的。指向聚合数据（aggregate data，如struct或数组）是对齐的，当且仅当它的每个组成数据是对齐的。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>记一次被黑</title>
      <link>https://liyiheng.github.io/blog/2018/10/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A2%AB%E9%BB%91/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2018/10/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%A2%AB%E9%BB%91/</guid>
      <description>&lt;p&gt;服务器被用来挖门罗币了。。。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[Rust学习]创建Vec指定长度</title>
      <link>https://liyiheng.github.io/blog/2018/06/rust%E5%AD%A6%E4%B9%A0%E5%88%9B%E5%BB%BAvec%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6/</link>
      <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2018/06/rust%E5%AD%A6%E4%B9%A0%E5%88%9B%E5%BB%BAvec%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6/</guid>
      <description>&lt;p&gt;golang中可创建指定长度的切片，Rust中的Vec只能在创建时指定容量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;: &lt;span class=&#34;nb&#34;&gt;Vec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;i32&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Vec&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;with_capacity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;{}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// index out of bounds
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>golang中time.Time“零值”的JSON处理</title>
      <link>https://liyiheng.github.io/blog/2018/05/golang%E4%B8%ADtime.time%E9%9B%B6%E5%80%BC%E7%9A%84json%E5%A4%84%E7%90%86/</link>
      <pubDate>Tue, 29 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2018/05/golang%E4%B8%ADtime.time%E9%9B%B6%E5%80%BC%E7%9A%84json%E5%A4%84%E7%90%86/</guid>
      <description>&lt;h2 id=&#34;场景&#34;&gt;场景&lt;/h2&gt;
&lt;p&gt;数据库为mongodb，驱动为mgo。从库中取数据后以json格式返给调用者。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MyStruct&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Time&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Time&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>google/gops源码分析</title>
      <link>https://liyiheng.github.io/blog/2017/11/google/gops%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2017/11/google/gops%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;发现了一个很实用的工具：gops&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gops is a command to list and diagnose Go processes currently running on your system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;觉得判断一个进程是否是go程序挺有意思，不妨看看它的大致实现。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[golang 小工具]静态文件服务器</title>
      <link>https://liyiheng.github.io/blog/2017/11/golang-%E5%B0%8F%E5%B7%A5%E5%85%B7%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2017/11/golang-%E5%B0%8F%E5%B7%A5%E5%85%B7%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>&lt;p&gt;把电脑上的文件传到手机上，或者传给其他电脑，这是再常见不过的事了。&lt;!-- raw HTML omitted --&gt;
这种情况通常是用 PC 端的 qq 或微信给手机发送文件。&lt;!-- raw HTML omitted --&gt;
不过对 Linux 用户来说，wine 上的 qq 多少有些不靠谱，web微信在传输大文件时也经常出问题。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译]在go可执行文件中嵌入数据</title>
      <link>https://liyiheng.github.io/blog/2017/09/%E8%AF%91%E5%9C%A8go%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E4%B8%AD%E5%B5%8C%E5%85%A5%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Fri, 08 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2017/09/%E8%AF%91%E5%9C%A8go%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E4%B8%AD%E5%B5%8C%E5%85%A5%E6%95%B0%E6%8D%AE/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文地址 &lt;a href=&#34;https://scene-si.org/2017/08/22/embedding-data-in-go-executables/&#34;&gt;https://scene-si.org/2017/08/22/embedding-data-in-go-executables/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假如你已经关注了我一段时间，应该知道我正在开发&lt;a href=&#34;https://github.com/titpetric/pendulum&#34;&gt;Pendulum编辑器&lt;/a&gt;作为每天至少编码一小时的&lt;a href=&#34;http://100daysofcode.com/&#34;&gt;#100DaysOfCode&lt;/a&gt;挑战。Pendulum是一个非常适合编辑简单文本和markdown文件的基于web的编辑器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang笔记：游戏中排行榜的实现</title>
      <link>https://liyiheng.github.io/blog/2017/08/golang%E7%AC%94%E8%AE%B0%E6%B8%B8%E6%88%8F%E4%B8%AD%E6%8E%92%E8%A1%8C%E6%A6%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2017/08/golang%E7%AC%94%E8%AE%B0%E6%B8%B8%E6%88%8F%E4%B8%AD%E6%8E%92%E8%A1%8C%E6%A6%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;游戏开发中排行榜经常出现,接触过的排行榜有两种。一种是由玩家挑战排名比自己靠前的其他玩家，胜利后交换位置；另一种是根据玩家的某特性对所有玩家进行排序。第一种只涉及到两个玩家数据的变化，实现起来比较简单，因此只记录第二种情况。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>git笔记(reflog)</title>
      <link>https://liyiheng.github.io/blog/2017/08/git%E7%AC%94%E8%AE%B0reflog/</link>
      <pubDate>Thu, 10 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2017/08/git%E7%AC%94%E8%AE%B0reflog/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;不熟悉git，差点翻车&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>[译]Golang中JSON和结构体的组合使用</title>
      <link>https://liyiheng.github.io/blog/2017/06/%E8%AF%91golang%E4%B8%ADjson%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2017/06/%E8%AF%91golang%E4%B8%ADjson%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;原文地址：http://attilaolah.eu/2014/09/10/json-and-struct-composition-in-go/
&lt;!-- raw HTML omitted --&gt;
假设你正在把一个JSON对象解码为Go的结构体。该JSON来自不受你控制的服务，因此你无法操作它的模式。但你想用不同的方式进行编码。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello protobuf !</title>
      <link>https://liyiheng.github.io/blog/2017/03/hello-protobuf/</link>
      <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2017/03/hello-protobuf/</guid>
      <description>&lt;p&gt;protobuf，独立于语言和平台的二进制数据传输格式。项目地址 &lt;a href=&#34;https://github.com/google/protobuf&#34;&gt;https://github.com/google/protobuf&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java学习笔记--单例模式</title>
      <link>https://liyiheng.github.io/blog/2017/03/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Sat, 04 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2017/03/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;整理常见的几种单例实现&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Volley学习笔记</title>
      <link>https://liyiheng.github.io/blog/2017/03/volley%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2017/03/volley%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;虽然更倾向于retrofit + okhttp，但目前的项目中还在用Volley，从学习的角度扒一扒&lt;a href=&#34;https://github.com/google/volley&#34;&gt;Volley的源码&lt;/a&gt;吧&lt;/p&gt;
&lt;p&gt;主要是分析Volley的部分实现，不再涉及&lt;a href=&#34;https://github.com/liyiheng/EasyVolley&#34;&gt;具体使用和二次封装&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://liyiheng.github.io/blog/2017/01/about/</link>
      <pubDate>Wed, 04 Jan 2017 21:27:04 +0800</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2017/01/about/</guid>
      <description>this is a small review.</description>
    </item>
    
    <item>
      <title>Elements showcase</title>
      <link>https://liyiheng.github.io/blog/2015/05/elements-showcase/</link>
      <pubDate>Thu, 28 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2015/05/elements-showcase/</guid>
      <description>&lt;p&gt;Check out how Tranquilpeak theme display well HTML elements (title, paragraph, blockquote, table and more..). It&amp;rsquo;s simple and elegant.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>中文測試</title>
      <link>https://liyiheng.github.io/blog/2013/10/chinese-test/</link>
      <pubDate>Wed, 02 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2013/10/chinese-test/</guid>
      <description>&lt;p&gt;This is a chinese test post to show you how chinese is displayed.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
