<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on (≧▽≦)</title>
    <link>https://liyiheng.github.io/blog/tags/golang/</link>
    <description>Recent content in golang on (≧▽≦)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 13 Nov 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://liyiheng.github.io/blog/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>google/gops源码分析</title>
      <link>https://liyiheng.github.io/blog/2017/11/google/gops%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Mon, 13 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2017/11/google/gops%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;发现了一个很实用的工具：gops&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gops is a command to list and diagnose Go processes currently running on your system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;觉得判断一个进程是否是go程序挺有意思，不妨看看它的大致实现。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[golang 小工具]静态文件服务器</title>
      <link>https://liyiheng.github.io/blog/2017/11/golang-%E5%B0%8F%E5%B7%A5%E5%85%B7%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2017/11/golang-%E5%B0%8F%E5%B7%A5%E5%85%B7%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>&lt;p&gt;把电脑上的文件传到手机上，或者传给其他电脑，这是再常见不过的事了。&lt;!-- raw HTML omitted --&gt;
这种情况通常是用 PC 端的 qq 或微信给手机发送文件。&lt;!-- raw HTML omitted --&gt;
不过对 Linux 用户来说，wine 上的 qq 多少有些不靠谱，web微信在传输大文件时也经常出问题。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译]在go可执行文件中嵌入数据</title>
      <link>https://liyiheng.github.io/blog/2017/09/%E8%AF%91%E5%9C%A8go%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E4%B8%AD%E5%B5%8C%E5%85%A5%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Fri, 08 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2017/09/%E8%AF%91%E5%9C%A8go%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E4%B8%AD%E5%B5%8C%E5%85%A5%E6%95%B0%E6%8D%AE/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;原文地址 &lt;a href=&#34;https://scene-si.org/2017/08/22/embedding-data-in-go-executables/&#34;&gt;https://scene-si.org/2017/08/22/embedding-data-in-go-executables/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假如你已经关注了我一段时间，应该知道我正在开发&lt;a href=&#34;https://github.com/titpetric/pendulum&#34;&gt;Pendulum编辑器&lt;/a&gt;作为每天至少编码一小时的&lt;a href=&#34;http://100daysofcode.com/&#34;&gt;#100DaysOfCode&lt;/a&gt;挑战。Pendulum是一个非常适合编辑简单文本和markdown文件的基于web的编辑器。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>golang笔记：游戏中排行榜的实现</title>
      <link>https://liyiheng.github.io/blog/2017/08/golang%E7%AC%94%E8%AE%B0%E6%B8%B8%E6%88%8F%E4%B8%AD%E6%8E%92%E8%A1%8C%E6%A6%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 29 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2017/08/golang%E7%AC%94%E8%AE%B0%E6%B8%B8%E6%88%8F%E4%B8%AD%E6%8E%92%E8%A1%8C%E6%A6%9C%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;游戏开发中排行榜经常出现,接触过的排行榜有两种。一种是由玩家挑战排名比自己靠前的其他玩家，胜利后交换位置；另一种是根据玩家的某特性对所有玩家进行排序。第一种只涉及到两个玩家数据的变化，实现起来比较简单，因此只记录第二种情况。&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[译]Golang中JSON和结构体的组合使用</title>
      <link>https://liyiheng.github.io/blog/2017/06/%E8%AF%91golang%E4%B8%ADjson%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://liyiheng.github.io/blog/2017/06/%E8%AF%91golang%E4%B8%ADjson%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;原文地址：http://attilaolah.eu/2014/09/10/json-and-struct-composition-in-go/
&lt;!-- raw HTML omitted --&gt;
假设你正在把一个JSON对象解码为Go的结构体。该JSON来自不受你控制的服务，因此你无法操作它的模式。但你想用不同的方式进行编码。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
